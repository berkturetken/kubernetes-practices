name: Release application

on:
  push:
    paths:
      - "todo_app/**"
      - ".github/workflows/main.yaml"
    branches:
      - main # Optional: only trigger on main branch
  workflow_dispatch: # Enable manual trigger

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }} # GKE_PROJECT: Google Cloud Project ID. The value is stored in GitHub env secrets
  GKE_CLUSTER: berk-personal-cluster
  GKE_ZONE: europe-north1-b
  REGISTRY: europe-north1-docker.pkg.dev
  REPOSITORY: my-docker-repository
  BRANCH: ${{ github.ref_name }}

jobs:
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    environment: DEV
    strategy:
      matrix:
        component:
          - name: todo-backend
            context: ./todo_app/todo_backend
          - name: todo-frontend
            context: ./todo_app/todo_frontend
          - name: todo-generator
            context: ./todo_app/todo_generator
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      # Authenticate using a service account key
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@7c6bc770dae815cd3e89ee6cdf493a5fab2cc093
        with:
          credentials_json: ${{ secrets.GKE_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@aa5489c8933f4cc7a4f7d45035b3b1440c9c10db

      # Configure Docker to authenticate with Google Artifact Registry
      - name: Use gcloud to configure Docker
        run: gcloud auth configure-docker europe-north1-docker.pkg.dev --quiet

      - name: Form the image name
        run: echo "IMAGE_TAG=$REGISTRY/$PROJECT_ID/$REPOSITORY/${{ matrix.component.name }}:$BRANCH-$GITHUB_SHA" >> $GITHUB_ENV

      - name: Build the Docker image
        run: docker build --tag $IMAGE_TAG ${{ matrix.component.context }}

      - name: Publish
        run: docker push $IMAGE_TAG

  deploy:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    environment: DEV
    needs: build-and-push
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      # Authenticate using a service account key
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@7c6bc770dae815cd3e89ee6cdf493a5fab2cc093
        with:
          credentials_json: ${{ secrets.GKE_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@aa5489c8933f4cc7a4f7d45035b3b1440c9c10db

      # Configures kubectl to communicate with the GKE cluster
      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@3da1e46a907576cefaa90c484278bb5b259dd395
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          project_id: ${{ env.PROJECT_ID }}
          location: ${{ env.GKE_ZONE }}

      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@2ba527d4d055ab63514ba50a99456fc35684947f

      - name: Update all images and deploy
        working-directory: ./todo_app
        run: |
          # Update all three images
          kustomize edit set image TODO_BACKEND_IMAGE_FROM_KUSTOMIZATION=$REGISTRY/$PROJECT_ID/$REPOSITORY/todo-backend:$BRANCH-$GITHUB_SHA
          kustomize edit set image TODO_FRONTEND_IMAGE_FROM_KUSTOMIZATION=$REGISTRY/$PROJECT_ID/$REPOSITORY/todo-frontend:$BRANCH-$GITHUB_SHA
          kustomize edit set image TODO_GENERATOR_IMAGE_FROM_KUSTOMIZATION=$REGISTRY/$PROJECT_ID/$REPOSITORY/todo-generator:$BRANCH-$GITHUB_SHA

          # Apply all changes at once
          kustomize build . | kubectl apply -f -

      - name: Wait for deployments
        # TODO: We can have an enhanced deployment waiting logic with automatic recovery:
        # 1. Try normal rollout with 3-minute timeout.
        # 2. If it times out, detect the stuck (i.e., not ready) and old replicasets.
        # 3. Scale down old replicasets to 0 which forces old pods to terminate.
        # 4. Wait again for 2 more minutes.
        # 5. Show the deployment status.
        run: |
          kubectl rollout status deployment todo-backend -n project --timeout=3m
          kubectl rollout status deployment todo-frontend -n project --timeout=3m
          echo "CronJob wiki-todo-generator updated successfully"

      - name: Show services
        run: kubectl get services -o wide -n project
