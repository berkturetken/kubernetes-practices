name: Release application

# TODO
# 1. Check the roles of the service account. Currently, we might not follow the Least Privilege Principle.
# 2. Check whether we can simplify the this file because there are already repetitions of some steps.
# 3. What happens to the deployments if we push to main multiple times in a short interval?
# 4. Shall we add readiness/liveness probes to the deployments and wait for them here?
# 5. Check the TODO below

on:
  push:
    paths:
      - "todo_app/**"
      - "!todo_app/**/*.md"
      - ".github/workflows/main.yaml" # for testing
    branches:
      - main
      - dev
      - "feature/**"
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to deploy"
        required: false
        default: ""

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }} # GKE_PROJECT: Google Cloud Project ID. The value is stored in GitHub env secrets
  GKE_CLUSTER: berk-personal-cluster
  GKE_ZONE: europe-north1-b
  REGISTRY: europe-north1-docker.pkg.dev
  REPOSITORY: my-docker-repository
  BRANCH: ${{ github.ref_name }}
  # Determine namespace: 'project' for main, branch name for others
  NAMESPACE: ${{ github.ref_name == 'main' && 'project' || format('env-{0}', github.ref_name) }}

jobs:
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'PROD' || 'DEV' }}
    strategy:
      matrix:
        component:
          - name: todo-backend
            context: ./todo_app/todo_backend
          - name: todo-frontend
            context: ./todo_app/todo_frontend
          - name: todo-generator
            context: ./todo_app/todo_generator
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      # Authenticate using a service account key
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@7c6bc770dae815cd3e89ee6cdf493a5fab2cc093
        with:
          credentials_json: ${{ secrets.GKE_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@aa5489c8933f4cc7a4f7d45035b3b1440c9c10db

      # Configure Docker to authenticate with Google Artifact Registry
      - name: Use gcloud to configure Docker
        run: gcloud auth configure-docker europe-north1-docker.pkg.dev --quiet

      - name: Form the image name
        run: echo "IMAGE_TAG=$REGISTRY/$PROJECT_ID/$REPOSITORY/${{ matrix.component.name }}:$BRANCH-$GITHUB_SHA" >> $GITHUB_ENV

      - name: Build the Docker image
        run: docker build --tag $IMAGE_TAG ${{ matrix.component.context }}

      - name: Publish
        run: docker push $IMAGE_TAG

  deploy:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'PROD' || 'DEV' }}
    needs: build-and-push
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      # Authenticate using a service account key
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@7c6bc770dae815cd3e89ee6cdf493a5fab2cc093
        with:
          credentials_json: ${{ secrets.GKE_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@aa5489c8933f4cc7a4f7d45035b3b1440c9c10db

      # Configures kubectl to communicate with the GKE cluster
      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@3da1e46a907576cefaa90c484278bb5b259dd395
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          project_id: ${{ env.PROJECT_ID }}
          location: ${{ env.GKE_ZONE }}

      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@2ba527d4d055ab63514ba50a99456fc35684947f

      - name: Create namespace if it doesn't exist
        run: kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to environment
        working-directory: ./todo_app
        run: |
          kustomize edit set namespace ${{ env.NAMESPACE }}
          kustomize edit set image TODO_BACKEND_IMAGE_FROM_KUSTOMIZATION=$REGISTRY/$PROJECT_ID/$REPOSITORY/todo-backend:$BRANCH-$GITHUB_SHA
          kustomize edit set image TODO_FRONTEND_IMAGE_FROM_KUSTOMIZATION=$REGISTRY/$PROJECT_ID/$REPOSITORY/todo-frontend:$BRANCH-$GITHUB_SHA
          kustomize edit set image TODO_GENERATOR_IMAGE_FROM_KUSTOMIZATION=$REGISTRY/$PROJECT_ID/$REPOSITORY/todo-generator:$BRANCH-$GITHUB_SHA
          kustomize build . | kubectl apply -f -

      - name: Wait for deployments
        # TODO: We can have an enhanced deployment waiting logic with automatic recovery:
        # 1. Try normal rollout with 3-minute timeout.
        # 2. If it times out, detect the stuck (i.e., not ready) and old replicasets.
        # 3. Scale down old replicasets to 0 which forces old pods to terminate.
        # 4. Wait again for 2 more minutes.
        # 5. Show the deployment status.
        run: |
          kubectl rollout status deployment todo-backend -n ${{ env.NAMESPACE }} --timeout=3m
          kubectl rollout status deployment todo-frontend -n ${{ env.NAMESPACE }} --timeout=3m
          echo "CronJob wiki-todo-generator updated successfully"

      - name: Show services
        run: |
          echo "Services in the '${{ env.NAMESPACE }}' namespace:"
          kubectl get services -o wide -n ${{ env.NAMESPACE }}
          echo -e "\n"
          echo "Ingresses in the '${{ env.NAMESPACE }}' namespace:"
          kubectl get ingress -n ${{ env.NAMESPACE }}

      - name: Add deployment summary
        if: github.event_name == 'push' && github.ref_name != 'main'
        run: |
          echo "ðŸš€ Deployed to environment: ${{ env.NAMESPACE }}"
          echo "ðŸ“¦ Images tagged with: $BRANCH-$GITHUB_SHA"
          echo "ðŸ”— Namespace: ${{ env.NAMESPACE }}"
